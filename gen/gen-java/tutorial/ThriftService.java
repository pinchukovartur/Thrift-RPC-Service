/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tutorial;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-04")
public class ThriftService {

  public interface Iface {

    public String setNewStudentInDB(String name, String surname, int group, int averageScore) throws org.apache.thrift.TException;

    public String deleteStudentById(int idstudent) throws org.apache.thrift.TException;

    public String searchStudentById(int idstudent) throws org.apache.thrift.TException;

    public String updateStudentById(int idStudent, String name, String surname, int group, int averageScore) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void setNewStudentInDB(String name, String surname, int group, int averageScore, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteStudentById(int idstudent, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void searchStudentById(int idstudent, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateStudentById(int idStudent, String name, String surname, int group, int averageScore, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String setNewStudentInDB(String name, String surname, int group, int averageScore) throws org.apache.thrift.TException
    {
      send_setNewStudentInDB(name, surname, group, averageScore);
      return recv_setNewStudentInDB();
    }

    public void send_setNewStudentInDB(String name, String surname, int group, int averageScore) throws org.apache.thrift.TException
    {
      setNewStudentInDB_args args = new setNewStudentInDB_args();
      args.setName(name);
      args.setSurname(surname);
      args.setGroup(group);
      args.setAverageScore(averageScore);
      sendBase("setNewStudentInDB", args);
    }

    public String recv_setNewStudentInDB() throws org.apache.thrift.TException
    {
      setNewStudentInDB_result result = new setNewStudentInDB_result();
      receiveBase(result, "setNewStudentInDB");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setNewStudentInDB failed: unknown result");
    }

    public String deleteStudentById(int idstudent) throws org.apache.thrift.TException
    {
      send_deleteStudentById(idstudent);
      return recv_deleteStudentById();
    }

    public void send_deleteStudentById(int idstudent) throws org.apache.thrift.TException
    {
      deleteStudentById_args args = new deleteStudentById_args();
      args.setIdstudent(idstudent);
      sendBase("deleteStudentById", args);
    }

    public String recv_deleteStudentById() throws org.apache.thrift.TException
    {
      deleteStudentById_result result = new deleteStudentById_result();
      receiveBase(result, "deleteStudentById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteStudentById failed: unknown result");
    }

    public String searchStudentById(int idstudent) throws org.apache.thrift.TException
    {
      send_searchStudentById(idstudent);
      return recv_searchStudentById();
    }

    public void send_searchStudentById(int idstudent) throws org.apache.thrift.TException
    {
      searchStudentById_args args = new searchStudentById_args();
      args.setIdstudent(idstudent);
      sendBase("searchStudentById", args);
    }

    public String recv_searchStudentById() throws org.apache.thrift.TException
    {
      searchStudentById_result result = new searchStudentById_result();
      receiveBase(result, "searchStudentById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchStudentById failed: unknown result");
    }

    public String updateStudentById(int idStudent, String name, String surname, int group, int averageScore) throws org.apache.thrift.TException
    {
      send_updateStudentById(idStudent, name, surname, group, averageScore);
      return recv_updateStudentById();
    }

    public void send_updateStudentById(int idStudent, String name, String surname, int group, int averageScore) throws org.apache.thrift.TException
    {
      updateStudentById_args args = new updateStudentById_args();
      args.setIdStudent(idStudent);
      args.setName(name);
      args.setSurname(surname);
      args.setGroup(group);
      args.setAverageScore(averageScore);
      sendBase("updateStudentById", args);
    }

    public String recv_updateStudentById() throws org.apache.thrift.TException
    {
      updateStudentById_result result = new updateStudentById_result();
      receiveBase(result, "updateStudentById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateStudentById failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void setNewStudentInDB(String name, String surname, int group, int averageScore, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setNewStudentInDB_call method_call = new setNewStudentInDB_call(name, surname, group, averageScore, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setNewStudentInDB_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private String surname;
      private int group;
      private int averageScore;
      public setNewStudentInDB_call(String name, String surname, int group, int averageScore, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.surname = surname;
        this.group = group;
        this.averageScore = averageScore;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setNewStudentInDB", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setNewStudentInDB_args args = new setNewStudentInDB_args();
        args.setName(name);
        args.setSurname(surname);
        args.setGroup(group);
        args.setAverageScore(averageScore);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setNewStudentInDB();
      }
    }

    public void deleteStudentById(int idstudent, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteStudentById_call method_call = new deleteStudentById_call(idstudent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteStudentById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int idstudent;
      public deleteStudentById_call(int idstudent, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idstudent = idstudent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteStudentById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteStudentById_args args = new deleteStudentById_args();
        args.setIdstudent(idstudent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteStudentById();
      }
    }

    public void searchStudentById(int idstudent, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchStudentById_call method_call = new searchStudentById_call(idstudent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchStudentById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int idstudent;
      public searchStudentById_call(int idstudent, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idstudent = idstudent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchStudentById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchStudentById_args args = new searchStudentById_args();
        args.setIdstudent(idstudent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchStudentById();
      }
    }

    public void updateStudentById(int idStudent, String name, String surname, int group, int averageScore, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateStudentById_call method_call = new updateStudentById_call(idStudent, name, surname, group, averageScore, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateStudentById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int idStudent;
      private String name;
      private String surname;
      private int group;
      private int averageScore;
      public updateStudentById_call(int idStudent, String name, String surname, int group, int averageScore, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idStudent = idStudent;
        this.name = name;
        this.surname = surname;
        this.group = group;
        this.averageScore = averageScore;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateStudentById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateStudentById_args args = new updateStudentById_args();
        args.setIdStudent(idStudent);
        args.setName(name);
        args.setSurname(surname);
        args.setGroup(group);
        args.setAverageScore(averageScore);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateStudentById();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("setNewStudentInDB", new setNewStudentInDB());
      processMap.put("deleteStudentById", new deleteStudentById());
      processMap.put("searchStudentById", new searchStudentById());
      processMap.put("updateStudentById", new updateStudentById());
      return processMap;
    }

    public static class setNewStudentInDB<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setNewStudentInDB_args> {
      public setNewStudentInDB() {
        super("setNewStudentInDB");
      }

      public setNewStudentInDB_args getEmptyArgsInstance() {
        return new setNewStudentInDB_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setNewStudentInDB_result getResult(I iface, setNewStudentInDB_args args) throws org.apache.thrift.TException {
        setNewStudentInDB_result result = new setNewStudentInDB_result();
        result.success = iface.setNewStudentInDB(args.name, args.surname, args.group, args.averageScore);
        return result;
      }
    }

    public static class deleteStudentById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteStudentById_args> {
      public deleteStudentById() {
        super("deleteStudentById");
      }

      public deleteStudentById_args getEmptyArgsInstance() {
        return new deleteStudentById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteStudentById_result getResult(I iface, deleteStudentById_args args) throws org.apache.thrift.TException {
        deleteStudentById_result result = new deleteStudentById_result();
        result.success = iface.deleteStudentById(args.idstudent);
        return result;
      }
    }

    public static class searchStudentById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchStudentById_args> {
      public searchStudentById() {
        super("searchStudentById");
      }

      public searchStudentById_args getEmptyArgsInstance() {
        return new searchStudentById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchStudentById_result getResult(I iface, searchStudentById_args args) throws org.apache.thrift.TException {
        searchStudentById_result result = new searchStudentById_result();
        result.success = iface.searchStudentById(args.idstudent);
        return result;
      }
    }

    public static class updateStudentById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateStudentById_args> {
      public updateStudentById() {
        super("updateStudentById");
      }

      public updateStudentById_args getEmptyArgsInstance() {
        return new updateStudentById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateStudentById_result getResult(I iface, updateStudentById_args args) throws org.apache.thrift.TException {
        updateStudentById_result result = new updateStudentById_result();
        result.success = iface.updateStudentById(args.idStudent, args.name, args.surname, args.group, args.averageScore);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("setNewStudentInDB", new setNewStudentInDB());
      processMap.put("deleteStudentById", new deleteStudentById());
      processMap.put("searchStudentById", new searchStudentById());
      processMap.put("updateStudentById", new updateStudentById());
      return processMap;
    }

    public static class setNewStudentInDB<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setNewStudentInDB_args, String> {
      public setNewStudentInDB() {
        super("setNewStudentInDB");
      }

      public setNewStudentInDB_args getEmptyArgsInstance() {
        return new setNewStudentInDB_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            setNewStudentInDB_result result = new setNewStudentInDB_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setNewStudentInDB_result result = new setNewStudentInDB_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setNewStudentInDB_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.setNewStudentInDB(args.name, args.surname, args.group, args.averageScore,resultHandler);
      }
    }

    public static class deleteStudentById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteStudentById_args, String> {
      public deleteStudentById() {
        super("deleteStudentById");
      }

      public deleteStudentById_args getEmptyArgsInstance() {
        return new deleteStudentById_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            deleteStudentById_result result = new deleteStudentById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteStudentById_result result = new deleteStudentById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteStudentById_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.deleteStudentById(args.idstudent,resultHandler);
      }
    }

    public static class searchStudentById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchStudentById_args, String> {
      public searchStudentById() {
        super("searchStudentById");
      }

      public searchStudentById_args getEmptyArgsInstance() {
        return new searchStudentById_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            searchStudentById_result result = new searchStudentById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            searchStudentById_result result = new searchStudentById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchStudentById_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.searchStudentById(args.idstudent,resultHandler);
      }
    }

    public static class updateStudentById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateStudentById_args, String> {
      public updateStudentById() {
        super("updateStudentById");
      }

      public updateStudentById_args getEmptyArgsInstance() {
        return new updateStudentById_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            updateStudentById_result result = new updateStudentById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateStudentById_result result = new updateStudentById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateStudentById_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.updateStudentById(args.idStudent, args.name, args.surname, args.group, args.averageScore,resultHandler);
      }
    }

  }

  public static class setNewStudentInDB_args implements org.apache.thrift.TBase<setNewStudentInDB_args, setNewStudentInDB_args._Fields>, java.io.Serializable, Cloneable, Comparable<setNewStudentInDB_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setNewStudentInDB_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SURNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("surname", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField AVERAGE_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("averageScore", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setNewStudentInDB_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setNewStudentInDB_argsTupleSchemeFactory());
    }

    public String name; // required
    public String surname; // required
    public int group; // required
    public int averageScore; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      SURNAME((short)2, "surname"),
      GROUP((short)3, "group"),
      AVERAGE_SCORE((short)4, "averageScore");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // SURNAME
            return SURNAME;
          case 3: // GROUP
            return GROUP;
          case 4: // AVERAGE_SCORE
            return AVERAGE_SCORE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUP_ISSET_ID = 0;
    private static final int __AVERAGESCORE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SURNAME, new org.apache.thrift.meta_data.FieldMetaData("surname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.AVERAGE_SCORE, new org.apache.thrift.meta_data.FieldMetaData("averageScore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setNewStudentInDB_args.class, metaDataMap);
    }

    public setNewStudentInDB_args() {
    }

    public setNewStudentInDB_args(
      String name,
      String surname,
      int group,
      int averageScore)
    {
      this();
      this.name = name;
      this.surname = surname;
      this.group = group;
      setGroupIsSet(true);
      this.averageScore = averageScore;
      setAverageScoreIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setNewStudentInDB_args(setNewStudentInDB_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetSurname()) {
        this.surname = other.surname;
      }
      this.group = other.group;
      this.averageScore = other.averageScore;
    }

    public setNewStudentInDB_args deepCopy() {
      return new setNewStudentInDB_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.surname = null;
      setGroupIsSet(false);
      this.group = 0;
      setAverageScoreIsSet(false);
      this.averageScore = 0;
    }

    public String getName() {
      return this.name;
    }

    public setNewStudentInDB_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getSurname() {
      return this.surname;
    }

    public setNewStudentInDB_args setSurname(String surname) {
      this.surname = surname;
      return this;
    }

    public void unsetSurname() {
      this.surname = null;
    }

    /** Returns true if field surname is set (has been assigned a value) and false otherwise */
    public boolean isSetSurname() {
      return this.surname != null;
    }

    public void setSurnameIsSet(boolean value) {
      if (!value) {
        this.surname = null;
      }
    }

    public int getGroup() {
      return this.group;
    }

    public setNewStudentInDB_args setGroup(int group) {
      this.group = group;
      setGroupIsSet(true);
      return this;
    }

    public void unsetGroup() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUP_ISSET_ID);
    }

    /** Returns true if field group is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUP_ISSET_ID);
    }

    public void setGroupIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUP_ISSET_ID, value);
    }

    public int getAverageScore() {
      return this.averageScore;
    }

    public setNewStudentInDB_args setAverageScore(int averageScore) {
      this.averageScore = averageScore;
      setAverageScoreIsSet(true);
      return this;
    }

    public void unsetAverageScore() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVERAGESCORE_ISSET_ID);
    }

    /** Returns true if field averageScore is set (has been assigned a value) and false otherwise */
    public boolean isSetAverageScore() {
      return EncodingUtils.testBit(__isset_bitfield, __AVERAGESCORE_ISSET_ID);
    }

    public void setAverageScoreIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVERAGESCORE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case SURNAME:
        if (value == null) {
          unsetSurname();
        } else {
          setSurname((String)value);
        }
        break;

      case GROUP:
        if (value == null) {
          unsetGroup();
        } else {
          setGroup((Integer)value);
        }
        break;

      case AVERAGE_SCORE:
        if (value == null) {
          unsetAverageScore();
        } else {
          setAverageScore((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case SURNAME:
        return getSurname();

      case GROUP:
        return getGroup();

      case AVERAGE_SCORE:
        return getAverageScore();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case SURNAME:
        return isSetSurname();
      case GROUP:
        return isSetGroup();
      case AVERAGE_SCORE:
        return isSetAverageScore();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setNewStudentInDB_args)
        return this.equals((setNewStudentInDB_args)that);
      return false;
    }

    public boolean equals(setNewStudentInDB_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_surname = true && this.isSetSurname();
      boolean that_present_surname = true && that.isSetSurname();
      if (this_present_surname || that_present_surname) {
        if (!(this_present_surname && that_present_surname))
          return false;
        if (!this.surname.equals(that.surname))
          return false;
      }

      boolean this_present_group = true;
      boolean that_present_group = true;
      if (this_present_group || that_present_group) {
        if (!(this_present_group && that_present_group))
          return false;
        if (this.group != that.group)
          return false;
      }

      boolean this_present_averageScore = true;
      boolean that_present_averageScore = true;
      if (this_present_averageScore || that_present_averageScore) {
        if (!(this_present_averageScore && that_present_averageScore))
          return false;
        if (this.averageScore != that.averageScore)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_surname = true && (isSetSurname());
      list.add(present_surname);
      if (present_surname)
        list.add(surname);

      boolean present_group = true;
      list.add(present_group);
      if (present_group)
        list.add(group);

      boolean present_averageScore = true;
      list.add(present_averageScore);
      if (present_averageScore)
        list.add(averageScore);

      return list.hashCode();
    }

    @Override
    public int compareTo(setNewStudentInDB_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSurname()).compareTo(other.isSetSurname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSurname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.surname, other.surname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAverageScore()).compareTo(other.isSetAverageScore());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAverageScore()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.averageScore, other.averageScore);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setNewStudentInDB_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("surname:");
      if (this.surname == null) {
        sb.append("null");
      } else {
        sb.append(this.surname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("group:");
      sb.append(this.group);
      first = false;
      if (!first) sb.append(", ");
      sb.append("averageScore:");
      sb.append(this.averageScore);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setNewStudentInDB_argsStandardSchemeFactory implements SchemeFactory {
      public setNewStudentInDB_argsStandardScheme getScheme() {
        return new setNewStudentInDB_argsStandardScheme();
      }
    }

    private static class setNewStudentInDB_argsStandardScheme extends StandardScheme<setNewStudentInDB_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setNewStudentInDB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SURNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.surname = iprot.readString();
                struct.setSurnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.group = iprot.readI32();
                struct.setGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // AVERAGE_SCORE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.averageScore = iprot.readI32();
                struct.setAverageScoreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setNewStudentInDB_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.surname != null) {
          oprot.writeFieldBegin(SURNAME_FIELD_DESC);
          oprot.writeString(struct.surname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(GROUP_FIELD_DESC);
        oprot.writeI32(struct.group);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AVERAGE_SCORE_FIELD_DESC);
        oprot.writeI32(struct.averageScore);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setNewStudentInDB_argsTupleSchemeFactory implements SchemeFactory {
      public setNewStudentInDB_argsTupleScheme getScheme() {
        return new setNewStudentInDB_argsTupleScheme();
      }
    }

    private static class setNewStudentInDB_argsTupleScheme extends TupleScheme<setNewStudentInDB_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setNewStudentInDB_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        if (struct.isSetSurname()) {
          optionals.set(1);
        }
        if (struct.isSetGroup()) {
          optionals.set(2);
        }
        if (struct.isSetAverageScore()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetSurname()) {
          oprot.writeString(struct.surname);
        }
        if (struct.isSetGroup()) {
          oprot.writeI32(struct.group);
        }
        if (struct.isSetAverageScore()) {
          oprot.writeI32(struct.averageScore);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setNewStudentInDB_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.surname = iprot.readString();
          struct.setSurnameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.group = iprot.readI32();
          struct.setGroupIsSet(true);
        }
        if (incoming.get(3)) {
          struct.averageScore = iprot.readI32();
          struct.setAverageScoreIsSet(true);
        }
      }
    }

  }

  public static class setNewStudentInDB_result implements org.apache.thrift.TBase<setNewStudentInDB_result, setNewStudentInDB_result._Fields>, java.io.Serializable, Cloneable, Comparable<setNewStudentInDB_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setNewStudentInDB_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setNewStudentInDB_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setNewStudentInDB_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setNewStudentInDB_result.class, metaDataMap);
    }

    public setNewStudentInDB_result() {
    }

    public setNewStudentInDB_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setNewStudentInDB_result(setNewStudentInDB_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public setNewStudentInDB_result deepCopy() {
      return new setNewStudentInDB_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public setNewStudentInDB_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setNewStudentInDB_result)
        return this.equals((setNewStudentInDB_result)that);
      return false;
    }

    public boolean equals(setNewStudentInDB_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(setNewStudentInDB_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setNewStudentInDB_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setNewStudentInDB_resultStandardSchemeFactory implements SchemeFactory {
      public setNewStudentInDB_resultStandardScheme getScheme() {
        return new setNewStudentInDB_resultStandardScheme();
      }
    }

    private static class setNewStudentInDB_resultStandardScheme extends StandardScheme<setNewStudentInDB_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setNewStudentInDB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setNewStudentInDB_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setNewStudentInDB_resultTupleSchemeFactory implements SchemeFactory {
      public setNewStudentInDB_resultTupleScheme getScheme() {
        return new setNewStudentInDB_resultTupleScheme();
      }
    }

    private static class setNewStudentInDB_resultTupleScheme extends TupleScheme<setNewStudentInDB_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setNewStudentInDB_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setNewStudentInDB_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteStudentById_args implements org.apache.thrift.TBase<deleteStudentById_args, deleteStudentById_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteStudentById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteStudentById_args");

    private static final org.apache.thrift.protocol.TField IDSTUDENT_FIELD_DESC = new org.apache.thrift.protocol.TField("idstudent", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteStudentById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteStudentById_argsTupleSchemeFactory());
    }

    public int idstudent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDSTUDENT((short)1, "idstudent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDSTUDENT
            return IDSTUDENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDSTUDENT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDSTUDENT, new org.apache.thrift.meta_data.FieldMetaData("idstudent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteStudentById_args.class, metaDataMap);
    }

    public deleteStudentById_args() {
    }

    public deleteStudentById_args(
      int idstudent)
    {
      this();
      this.idstudent = idstudent;
      setIdstudentIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteStudentById_args(deleteStudentById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idstudent = other.idstudent;
    }

    public deleteStudentById_args deepCopy() {
      return new deleteStudentById_args(this);
    }

    @Override
    public void clear() {
      setIdstudentIsSet(false);
      this.idstudent = 0;
    }

    public int getIdstudent() {
      return this.idstudent;
    }

    public deleteStudentById_args setIdstudent(int idstudent) {
      this.idstudent = idstudent;
      setIdstudentIsSet(true);
      return this;
    }

    public void unsetIdstudent() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDSTUDENT_ISSET_ID);
    }

    /** Returns true if field idstudent is set (has been assigned a value) and false otherwise */
    public boolean isSetIdstudent() {
      return EncodingUtils.testBit(__isset_bitfield, __IDSTUDENT_ISSET_ID);
    }

    public void setIdstudentIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDSTUDENT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDSTUDENT:
        if (value == null) {
          unsetIdstudent();
        } else {
          setIdstudent((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDSTUDENT:
        return getIdstudent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDSTUDENT:
        return isSetIdstudent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteStudentById_args)
        return this.equals((deleteStudentById_args)that);
      return false;
    }

    public boolean equals(deleteStudentById_args that) {
      if (that == null)
        return false;

      boolean this_present_idstudent = true;
      boolean that_present_idstudent = true;
      if (this_present_idstudent || that_present_idstudent) {
        if (!(this_present_idstudent && that_present_idstudent))
          return false;
        if (this.idstudent != that.idstudent)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_idstudent = true;
      list.add(present_idstudent);
      if (present_idstudent)
        list.add(idstudent);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteStudentById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIdstudent()).compareTo(other.isSetIdstudent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdstudent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idstudent, other.idstudent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteStudentById_args(");
      boolean first = true;

      sb.append("idstudent:");
      sb.append(this.idstudent);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteStudentById_argsStandardSchemeFactory implements SchemeFactory {
      public deleteStudentById_argsStandardScheme getScheme() {
        return new deleteStudentById_argsStandardScheme();
      }
    }

    private static class deleteStudentById_argsStandardScheme extends StandardScheme<deleteStudentById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteStudentById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDSTUDENT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idstudent = iprot.readI32();
                struct.setIdstudentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteStudentById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(IDSTUDENT_FIELD_DESC);
        oprot.writeI32(struct.idstudent);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteStudentById_argsTupleSchemeFactory implements SchemeFactory {
      public deleteStudentById_argsTupleScheme getScheme() {
        return new deleteStudentById_argsTupleScheme();
      }
    }

    private static class deleteStudentById_argsTupleScheme extends TupleScheme<deleteStudentById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteStudentById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIdstudent()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdstudent()) {
          oprot.writeI32(struct.idstudent);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteStudentById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.idstudent = iprot.readI32();
          struct.setIdstudentIsSet(true);
        }
      }
    }

  }

  public static class deleteStudentById_result implements org.apache.thrift.TBase<deleteStudentById_result, deleteStudentById_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteStudentById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteStudentById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteStudentById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteStudentById_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteStudentById_result.class, metaDataMap);
    }

    public deleteStudentById_result() {
    }

    public deleteStudentById_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteStudentById_result(deleteStudentById_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public deleteStudentById_result deepCopy() {
      return new deleteStudentById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public deleteStudentById_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteStudentById_result)
        return this.equals((deleteStudentById_result)that);
      return false;
    }

    public boolean equals(deleteStudentById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteStudentById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteStudentById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteStudentById_resultStandardSchemeFactory implements SchemeFactory {
      public deleteStudentById_resultStandardScheme getScheme() {
        return new deleteStudentById_resultStandardScheme();
      }
    }

    private static class deleteStudentById_resultStandardScheme extends StandardScheme<deleteStudentById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteStudentById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteStudentById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteStudentById_resultTupleSchemeFactory implements SchemeFactory {
      public deleteStudentById_resultTupleScheme getScheme() {
        return new deleteStudentById_resultTupleScheme();
      }
    }

    private static class deleteStudentById_resultTupleScheme extends TupleScheme<deleteStudentById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteStudentById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteStudentById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchStudentById_args implements org.apache.thrift.TBase<searchStudentById_args, searchStudentById_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchStudentById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchStudentById_args");

    private static final org.apache.thrift.protocol.TField IDSTUDENT_FIELD_DESC = new org.apache.thrift.protocol.TField("idstudent", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchStudentById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchStudentById_argsTupleSchemeFactory());
    }

    public int idstudent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDSTUDENT((short)1, "idstudent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDSTUDENT
            return IDSTUDENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDSTUDENT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDSTUDENT, new org.apache.thrift.meta_data.FieldMetaData("idstudent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchStudentById_args.class, metaDataMap);
    }

    public searchStudentById_args() {
    }

    public searchStudentById_args(
      int idstudent)
    {
      this();
      this.idstudent = idstudent;
      setIdstudentIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchStudentById_args(searchStudentById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idstudent = other.idstudent;
    }

    public searchStudentById_args deepCopy() {
      return new searchStudentById_args(this);
    }

    @Override
    public void clear() {
      setIdstudentIsSet(false);
      this.idstudent = 0;
    }

    public int getIdstudent() {
      return this.idstudent;
    }

    public searchStudentById_args setIdstudent(int idstudent) {
      this.idstudent = idstudent;
      setIdstudentIsSet(true);
      return this;
    }

    public void unsetIdstudent() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDSTUDENT_ISSET_ID);
    }

    /** Returns true if field idstudent is set (has been assigned a value) and false otherwise */
    public boolean isSetIdstudent() {
      return EncodingUtils.testBit(__isset_bitfield, __IDSTUDENT_ISSET_ID);
    }

    public void setIdstudentIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDSTUDENT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDSTUDENT:
        if (value == null) {
          unsetIdstudent();
        } else {
          setIdstudent((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDSTUDENT:
        return getIdstudent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDSTUDENT:
        return isSetIdstudent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchStudentById_args)
        return this.equals((searchStudentById_args)that);
      return false;
    }

    public boolean equals(searchStudentById_args that) {
      if (that == null)
        return false;

      boolean this_present_idstudent = true;
      boolean that_present_idstudent = true;
      if (this_present_idstudent || that_present_idstudent) {
        if (!(this_present_idstudent && that_present_idstudent))
          return false;
        if (this.idstudent != that.idstudent)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_idstudent = true;
      list.add(present_idstudent);
      if (present_idstudent)
        list.add(idstudent);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchStudentById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIdstudent()).compareTo(other.isSetIdstudent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdstudent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idstudent, other.idstudent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchStudentById_args(");
      boolean first = true;

      sb.append("idstudent:");
      sb.append(this.idstudent);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchStudentById_argsStandardSchemeFactory implements SchemeFactory {
      public searchStudentById_argsStandardScheme getScheme() {
        return new searchStudentById_argsStandardScheme();
      }
    }

    private static class searchStudentById_argsStandardScheme extends StandardScheme<searchStudentById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchStudentById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDSTUDENT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idstudent = iprot.readI32();
                struct.setIdstudentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchStudentById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(IDSTUDENT_FIELD_DESC);
        oprot.writeI32(struct.idstudent);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchStudentById_argsTupleSchemeFactory implements SchemeFactory {
      public searchStudentById_argsTupleScheme getScheme() {
        return new searchStudentById_argsTupleScheme();
      }
    }

    private static class searchStudentById_argsTupleScheme extends TupleScheme<searchStudentById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchStudentById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIdstudent()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdstudent()) {
          oprot.writeI32(struct.idstudent);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchStudentById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.idstudent = iprot.readI32();
          struct.setIdstudentIsSet(true);
        }
      }
    }

  }

  public static class searchStudentById_result implements org.apache.thrift.TBase<searchStudentById_result, searchStudentById_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchStudentById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchStudentById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchStudentById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchStudentById_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchStudentById_result.class, metaDataMap);
    }

    public searchStudentById_result() {
    }

    public searchStudentById_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchStudentById_result(searchStudentById_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public searchStudentById_result deepCopy() {
      return new searchStudentById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public searchStudentById_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchStudentById_result)
        return this.equals((searchStudentById_result)that);
      return false;
    }

    public boolean equals(searchStudentById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchStudentById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchStudentById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchStudentById_resultStandardSchemeFactory implements SchemeFactory {
      public searchStudentById_resultStandardScheme getScheme() {
        return new searchStudentById_resultStandardScheme();
      }
    }

    private static class searchStudentById_resultStandardScheme extends StandardScheme<searchStudentById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchStudentById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchStudentById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchStudentById_resultTupleSchemeFactory implements SchemeFactory {
      public searchStudentById_resultTupleScheme getScheme() {
        return new searchStudentById_resultTupleScheme();
      }
    }

    private static class searchStudentById_resultTupleScheme extends TupleScheme<searchStudentById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchStudentById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchStudentById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateStudentById_args implements org.apache.thrift.TBase<updateStudentById_args, updateStudentById_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateStudentById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStudentById_args");

    private static final org.apache.thrift.protocol.TField ID_STUDENT_FIELD_DESC = new org.apache.thrift.protocol.TField("idStudent", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SURNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("surname", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField AVERAGE_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("averageScore", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStudentById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStudentById_argsTupleSchemeFactory());
    }

    public int idStudent; // required
    public String name; // required
    public String surname; // required
    public int group; // required
    public int averageScore; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_STUDENT((short)1, "idStudent"),
      NAME((short)2, "name"),
      SURNAME((short)3, "surname"),
      GROUP((short)4, "group"),
      AVERAGE_SCORE((short)5, "averageScore");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_STUDENT
            return ID_STUDENT;
          case 2: // NAME
            return NAME;
          case 3: // SURNAME
            return SURNAME;
          case 4: // GROUP
            return GROUP;
          case 5: // AVERAGE_SCORE
            return AVERAGE_SCORE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDSTUDENT_ISSET_ID = 0;
    private static final int __GROUP_ISSET_ID = 1;
    private static final int __AVERAGESCORE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_STUDENT, new org.apache.thrift.meta_data.FieldMetaData("idStudent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SURNAME, new org.apache.thrift.meta_data.FieldMetaData("surname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.AVERAGE_SCORE, new org.apache.thrift.meta_data.FieldMetaData("averageScore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStudentById_args.class, metaDataMap);
    }

    public updateStudentById_args() {
    }

    public updateStudentById_args(
      int idStudent,
      String name,
      String surname,
      int group,
      int averageScore)
    {
      this();
      this.idStudent = idStudent;
      setIdStudentIsSet(true);
      this.name = name;
      this.surname = surname;
      this.group = group;
      setGroupIsSet(true);
      this.averageScore = averageScore;
      setAverageScoreIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStudentById_args(updateStudentById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idStudent = other.idStudent;
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetSurname()) {
        this.surname = other.surname;
      }
      this.group = other.group;
      this.averageScore = other.averageScore;
    }

    public updateStudentById_args deepCopy() {
      return new updateStudentById_args(this);
    }

    @Override
    public void clear() {
      setIdStudentIsSet(false);
      this.idStudent = 0;
      this.name = null;
      this.surname = null;
      setGroupIsSet(false);
      this.group = 0;
      setAverageScoreIsSet(false);
      this.averageScore = 0;
    }

    public int getIdStudent() {
      return this.idStudent;
    }

    public updateStudentById_args setIdStudent(int idStudent) {
      this.idStudent = idStudent;
      setIdStudentIsSet(true);
      return this;
    }

    public void unsetIdStudent() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDSTUDENT_ISSET_ID);
    }

    /** Returns true if field idStudent is set (has been assigned a value) and false otherwise */
    public boolean isSetIdStudent() {
      return EncodingUtils.testBit(__isset_bitfield, __IDSTUDENT_ISSET_ID);
    }

    public void setIdStudentIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDSTUDENT_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public updateStudentById_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getSurname() {
      return this.surname;
    }

    public updateStudentById_args setSurname(String surname) {
      this.surname = surname;
      return this;
    }

    public void unsetSurname() {
      this.surname = null;
    }

    /** Returns true if field surname is set (has been assigned a value) and false otherwise */
    public boolean isSetSurname() {
      return this.surname != null;
    }

    public void setSurnameIsSet(boolean value) {
      if (!value) {
        this.surname = null;
      }
    }

    public int getGroup() {
      return this.group;
    }

    public updateStudentById_args setGroup(int group) {
      this.group = group;
      setGroupIsSet(true);
      return this;
    }

    public void unsetGroup() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUP_ISSET_ID);
    }

    /** Returns true if field group is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUP_ISSET_ID);
    }

    public void setGroupIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUP_ISSET_ID, value);
    }

    public int getAverageScore() {
      return this.averageScore;
    }

    public updateStudentById_args setAverageScore(int averageScore) {
      this.averageScore = averageScore;
      setAverageScoreIsSet(true);
      return this;
    }

    public void unsetAverageScore() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVERAGESCORE_ISSET_ID);
    }

    /** Returns true if field averageScore is set (has been assigned a value) and false otherwise */
    public boolean isSetAverageScore() {
      return EncodingUtils.testBit(__isset_bitfield, __AVERAGESCORE_ISSET_ID);
    }

    public void setAverageScoreIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVERAGESCORE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID_STUDENT:
        if (value == null) {
          unsetIdStudent();
        } else {
          setIdStudent((Integer)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case SURNAME:
        if (value == null) {
          unsetSurname();
        } else {
          setSurname((String)value);
        }
        break;

      case GROUP:
        if (value == null) {
          unsetGroup();
        } else {
          setGroup((Integer)value);
        }
        break;

      case AVERAGE_SCORE:
        if (value == null) {
          unsetAverageScore();
        } else {
          setAverageScore((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_STUDENT:
        return getIdStudent();

      case NAME:
        return getName();

      case SURNAME:
        return getSurname();

      case GROUP:
        return getGroup();

      case AVERAGE_SCORE:
        return getAverageScore();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID_STUDENT:
        return isSetIdStudent();
      case NAME:
        return isSetName();
      case SURNAME:
        return isSetSurname();
      case GROUP:
        return isSetGroup();
      case AVERAGE_SCORE:
        return isSetAverageScore();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStudentById_args)
        return this.equals((updateStudentById_args)that);
      return false;
    }

    public boolean equals(updateStudentById_args that) {
      if (that == null)
        return false;

      boolean this_present_idStudent = true;
      boolean that_present_idStudent = true;
      if (this_present_idStudent || that_present_idStudent) {
        if (!(this_present_idStudent && that_present_idStudent))
          return false;
        if (this.idStudent != that.idStudent)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_surname = true && this.isSetSurname();
      boolean that_present_surname = true && that.isSetSurname();
      if (this_present_surname || that_present_surname) {
        if (!(this_present_surname && that_present_surname))
          return false;
        if (!this.surname.equals(that.surname))
          return false;
      }

      boolean this_present_group = true;
      boolean that_present_group = true;
      if (this_present_group || that_present_group) {
        if (!(this_present_group && that_present_group))
          return false;
        if (this.group != that.group)
          return false;
      }

      boolean this_present_averageScore = true;
      boolean that_present_averageScore = true;
      if (this_present_averageScore || that_present_averageScore) {
        if (!(this_present_averageScore && that_present_averageScore))
          return false;
        if (this.averageScore != that.averageScore)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_idStudent = true;
      list.add(present_idStudent);
      if (present_idStudent)
        list.add(idStudent);

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_surname = true && (isSetSurname());
      list.add(present_surname);
      if (present_surname)
        list.add(surname);

      boolean present_group = true;
      list.add(present_group);
      if (present_group)
        list.add(group);

      boolean present_averageScore = true;
      list.add(present_averageScore);
      if (present_averageScore)
        list.add(averageScore);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateStudentById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIdStudent()).compareTo(other.isSetIdStudent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdStudent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idStudent, other.idStudent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSurname()).compareTo(other.isSetSurname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSurname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.surname, other.surname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAverageScore()).compareTo(other.isSetAverageScore());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAverageScore()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.averageScore, other.averageScore);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStudentById_args(");
      boolean first = true;

      sb.append("idStudent:");
      sb.append(this.idStudent);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("surname:");
      if (this.surname == null) {
        sb.append("null");
      } else {
        sb.append(this.surname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("group:");
      sb.append(this.group);
      first = false;
      if (!first) sb.append(", ");
      sb.append("averageScore:");
      sb.append(this.averageScore);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStudentById_argsStandardSchemeFactory implements SchemeFactory {
      public updateStudentById_argsStandardScheme getScheme() {
        return new updateStudentById_argsStandardScheme();
      }
    }

    private static class updateStudentById_argsStandardScheme extends StandardScheme<updateStudentById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStudentById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_STUDENT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idStudent = iprot.readI32();
                struct.setIdStudentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SURNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.surname = iprot.readString();
                struct.setSurnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.group = iprot.readI32();
                struct.setGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // AVERAGE_SCORE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.averageScore = iprot.readI32();
                struct.setAverageScoreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStudentById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_STUDENT_FIELD_DESC);
        oprot.writeI32(struct.idStudent);
        oprot.writeFieldEnd();
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.surname != null) {
          oprot.writeFieldBegin(SURNAME_FIELD_DESC);
          oprot.writeString(struct.surname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(GROUP_FIELD_DESC);
        oprot.writeI32(struct.group);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AVERAGE_SCORE_FIELD_DESC);
        oprot.writeI32(struct.averageScore);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStudentById_argsTupleSchemeFactory implements SchemeFactory {
      public updateStudentById_argsTupleScheme getScheme() {
        return new updateStudentById_argsTupleScheme();
      }
    }

    private static class updateStudentById_argsTupleScheme extends TupleScheme<updateStudentById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStudentById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIdStudent()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetSurname()) {
          optionals.set(2);
        }
        if (struct.isSetGroup()) {
          optionals.set(3);
        }
        if (struct.isSetAverageScore()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetIdStudent()) {
          oprot.writeI32(struct.idStudent);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetSurname()) {
          oprot.writeString(struct.surname);
        }
        if (struct.isSetGroup()) {
          oprot.writeI32(struct.group);
        }
        if (struct.isSetAverageScore()) {
          oprot.writeI32(struct.averageScore);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStudentById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.idStudent = iprot.readI32();
          struct.setIdStudentIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.surname = iprot.readString();
          struct.setSurnameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.group = iprot.readI32();
          struct.setGroupIsSet(true);
        }
        if (incoming.get(4)) {
          struct.averageScore = iprot.readI32();
          struct.setAverageScoreIsSet(true);
        }
      }
    }

  }

  public static class updateStudentById_result implements org.apache.thrift.TBase<updateStudentById_result, updateStudentById_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateStudentById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStudentById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStudentById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStudentById_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStudentById_result.class, metaDataMap);
    }

    public updateStudentById_result() {
    }

    public updateStudentById_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStudentById_result(updateStudentById_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public updateStudentById_result deepCopy() {
      return new updateStudentById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public updateStudentById_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStudentById_result)
        return this.equals((updateStudentById_result)that);
      return false;
    }

    public boolean equals(updateStudentById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateStudentById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStudentById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStudentById_resultStandardSchemeFactory implements SchemeFactory {
      public updateStudentById_resultStandardScheme getScheme() {
        return new updateStudentById_resultStandardScheme();
      }
    }

    private static class updateStudentById_resultStandardScheme extends StandardScheme<updateStudentById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStudentById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStudentById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStudentById_resultTupleSchemeFactory implements SchemeFactory {
      public updateStudentById_resultTupleScheme getScheme() {
        return new updateStudentById_resultTupleScheme();
      }
    }

    private static class updateStudentById_resultTupleScheme extends TupleScheme<updateStudentById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStudentById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStudentById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
